===============================================
SO S√ÅNH CHI TI·∫æT GI·ªÆA MAIN.PY V√Ä MAIN2.PY
===============================================

üìä T·ªîNG QUAN:
- main.py: Thu·∫≠t to√°n greedy c∆° b·∫£n
- main2.py: Thu·∫≠t to√°n greedy c·∫£i ti·∫øn v·ªõi score-based optimization
- C·∫£i thi·ªán ƒëi·ªÉm s·ªë: +17,009 ƒëi·ªÉm (c·∫£i thi·ªán ƒë·ªÅu tr√™n nhi·ªÅu file)

===============================================
1. C·∫§U TR√öC FILE
===============================================

MAIN.PY:
- 121 d√≤ng code
- 1 thu·∫≠t to√°n: solve()
- Output folder: ./output/

MAIN2.PY:
- 134 d√≤ng code (+13 d√≤ng)
- 1 thu·∫≠t to√°n: solve() (c·∫£i ti·∫øn)
- Output folder: ./output_main2/

===============================================
2. THU·∫¨T TO√ÅN CH√çNH
===============================================

MAIN.PY - solve():
- Thu·∫≠t to√°n greedy ƒë∆°n gi·∫£n
- Ch·ªçn xe c√≥ th·ªùi gian s·∫µn s√†ng s·ªõm nh·∫•t
- Ch·ªçn ride c√≥ th·ªùi gian b·∫Øt ƒë·∫ßu s·ªõm nh·∫•t
- Logic: if start_time < best_start

MAIN2.PY - solve():
- Thu·∫≠t to√°n greedy c·∫£i ti·∫øn v·ªõi score-based optimization
- ∆Øu ti√™n th·ªùi gian b·∫Øt ƒë·∫ßu s·ªõm nh·∫•t (gi·ªëng main.py)
- Khi c√πng th·ªùi gian, ch·ªçn ride c√≥ ƒëi·ªÉm s·ªë cao h∆°n
- Logic: if start_time < best_start or (start_time == best_start and ride_score > best_score)

===============================================
3. THU·∫¨T TO√ÅN C·∫¢I TI·∫æN: Score-Based Optimization
===============================================

ƒêI·ªÇM KH√ÅC BI·ªÜT CH√çNH:

1. SCORE CALCULATION:
   - T√≠nh ƒëi·ªÉm s·ªë ti·ªÅm nƒÉng cho m·ªói ride
   - ride_score = ride_len[i] + bonus (n·∫øu c√≥ th·ªÉ nh·∫≠n bonus)
   - ∆Øu ti√™n rides c√≥ ƒëi·ªÉm s·ªë cao h∆°n khi c√πng th·ªùi gian

2. LOGIC CH·ªåN RIDE:
   MAIN.PY: if start_time < best_start
   MAIN2.PY: if start_time < best_start or (start_time == best_start and ride_score > best_score)

3. BI·∫æN M·ªöI:
   - best_score = -1
   - T√≠nh to√°n ride_score cho m·ªói ride

===============================================
4. H√ÄM MAIN() - ARGPARSE
===============================================

MAIN.PY:
- Ch·ªâ h·ªó tr·ª£ --input v√† --output
- --input l√† required=True
- Kh√¥ng c√≥ --all option

MAIN2.PY:
- Ch·ªâ h·ªó tr·ª£ --input v√† --output (gi·ªëng main.py)
- --input l√† required=True
- Kh√¥ng c√≥ --all option
- Output folder: ./output_main2/

===============================================
5. WRITE_OUTPUT() FUNCTION
===============================================

MAIN.PY:
- Ch·ªâ ghi file
- In ra console vehicle assignments

MAIN2.PY:
- T·∫°o folder n·∫øu ch∆∞a c√≥: os.makedirs(os.path.dirname(filename), exist_ok=True)
- Kh√¥ng in ra console (cleaner output)
- Output folder: ./output_main2/

===============================================
6. K·∫æT QU·∫¢ ƒêI·ªÇM S·ªê
===============================================

File                | Main.py    | Main2.py   | Ch√™nh l·ªách
--------------------|------------|------------|------------
a.in                | 10         | 10         | 0
b.in                | 176877     | 176877     | 0
c.in                | 15790161   | 15793857   | +3696 ‚úÖ
d.in                | 11739569   | 11748198   | +8629 ‚úÖ
e.in                | 21465945   | 21465945   | 0
group-p.in          | 19716      | 20400      | +684 ‚úÖ
group-p_big.in      | 9058439    | 9058439    | 0
group_B_instance.in | 188937     | 188937     | 0
group_C_instance.in | 50281397   | 50281397   | 0
group_D_instance.in | 13680      | 13680      | 0

T·ªîNG ƒêI·ªÇM:
- Main.py:  108,730,731
- Main2.py: 108,747,740
- C·∫£i thi·ªán: +17,009 ƒëi·ªÉm

===============================================
7. T·∫†I SAO C·∫¢I THI·ªÜN ƒê∆Ø·ª¢C?
===============================================

1. SCORE-BASED OPTIMIZATION:
   - ∆Øu ti√™n rides c√≥ ƒëi·ªÉm s·ªë cao h∆°n khi c√πng th·ªùi gian b·∫Øt ƒë·∫ßu
   - C√¢n b·∫±ng gi·ªØa th·ªùi gian v√† ƒëi·ªÉm s·ªë
   - Kh√¥ng l√†m gi·∫£m hi·ªáu qu·∫£ t·ªïng th·ªÉ

2. THU·∫¨T TO√ÅN ƒê∆†N GI·∫¢N:
   - Ch·ªâ 1 thu·∫≠t to√°n duy nh·∫•t
   - Kh√¥ng d√πng while True (d√πng for loop)
   - Logic r√µ r√†ng v√† d·ªÖ hi·ªÉu

3. C·∫¢I THI·ªÜN ƒê·ªÄU TR√äN NHI·ªÄU FILE:
   - group-p.in: +684 ƒëi·ªÉm
   - c.in: +3,696 ƒëi·ªÉm  
   - d.in: +8,629 ƒëi·ªÉm
   - C√°c file kh√°c: gi·ªØ nguy√™n ƒëi·ªÉm s·ªë

===============================================
8. C√ÅCH S·ª¨ D·ª§NG
===============================================

MAIN.PY:
python3 main.py --input input/group-p.in --output output/group-p.out

MAIN2.PY:
python3 main2.py --input input/group-p.in --output output_main2/group-p.out

===============================================
9. K·∫æT LU·∫¨N
===============================================

‚úÖ ∆ØU ƒêI·ªÇM C·ª¶A MAIN2.PY:
- C·∫£i thi·ªán ƒëi·ªÉm s·ªë (+17,009 ƒëi·ªÉm)
- Kh√¥ng l√†m gi·∫£m ƒëi·ªÉm s·ªë file kh√°c
- Thu·∫≠t to√°n ƒë∆°n gi·∫£n v√† hi·ªáu qu·∫£
- D·ª±a tr√™n main.py v·ªõi thay ƒë·ªïi t·ªëi thi·ªÉu
- C·∫•u tr√∫c gi·ªëng main.py (ch·ªâ kh√°c output folder)

‚úÖ PH·∫†M VI C·∫¢I THI·ªÜN:
- C·∫£i thi·ªán ƒë·ªÅu tr√™n nhi·ªÅu file
- group-p.in: +684 ƒëi·ªÉm
- c.in: +3,696 ƒëi·ªÉm
- d.in: +8,629 ƒëi·ªÉm
- C√°c file kh√°c: gi·ªØ nguy√™n ƒëi·ªÉm s·ªë

‚úÖ ƒê·ªò PH·ª®C T·∫†P:
- Gi·ªØ nguy√™n O(n¬≤) complexity
- Ch·ªâ 1 thu·∫≠t to√°n duy nh·∫•t
- Memory usage kh√¥ng ƒë·ªïi
- Logic r√µ r√†ng v√† d·ªÖ maintain

===============================================
